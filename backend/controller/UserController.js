const { User } = require("../schema/User");

/**
 * The user's ID is autogenerated as the field _id.
 *
 * @param {*} req.body.name full name of a user
 * @param {*} req.body.token auth token
 */
exports.createUser = (req, res) => {
  const user = new User(req.body);
  user.save((err, user) => {
    if (err) {
      console.error(err);
      res.send(err);
    } else res.send(user);
  });
};

/**
 * @param {*} req.params.id: the user id
 */
exports.findUserById = (req, res) => {
  const id = req.params.id;
  User.findById(id, (err, user) => {
    if (err) {
      console.error(err);
      res.send(err);
    } else res.send(user);
  });
};

/**
 * @param {*} req.params.id: the spotify id
 */
exports.findUserBySpotifyId = (req, res) => {
  const id = req.params.id;
  User.findOne({ spotifyId: id }, (err, user) => {
    if (err) {
      console.error(err);
      res.send(err);
    } else res.send(user);
  });
};

/**
 * This IS AND SHOULD be a PATCH request. It is not a PUT request because
 * it is not designed to replace an entire entity.
 *
 * Even though $addToSet and $pull apply mutations to a collection, this
 * function is idempotent. Applying the same request multiple times will
 * yield the same result as the initial application:
 *
 * $addToSet https://docs.mongodb.com/manual/reference/operator/update/addToSet/
 * - For a given field, add value(s) if it does not already exist.
 *
 * $pull https://docs.mongodb.com/manual/reference/operator/update/pull/
 * - For a given field, remove all instances of value(s).
 *
 * example form:
 * {
 *   'name: 'Some edited name',
 *   'addToSet: {
 *     'friendIds': 'friend-id-to-add',
 *     'topSongIds': 'song-id-to-add'
 *   },
 *   'pull: {
 *     'friendIds': 'friend-id-to-remove',
 *     'topSongIds': 'song-id-to-remove'
 *   },
 * }
 *
 * @param {*} req.params.id the user id
 * @param {*} req.body.{any} modified value of a userSchema field
 * @param {*} req.body.addToSet use this to add friendIds and topSongIds
 * @param {*} req.body.pull use this to remove friendIds and topSongIds
 */
exports.updateUserById = (req, res) => {
  const id = req.params.id;
  const { addToSet, pull, ...fieldsToUpdate } = req.body;
  if (pull) fieldsToUpdate.$pull = JSON.parse(pull);
  if (addToSet) fieldsToUpdate.$addToSet = JSON.parse(addToSet);
  User.findByIdAndUpdate(id, fieldsToUpdate, { new: true }, (err, user) => {
    // the { new: true } option makes sure `user` is the updated value
    // in a Mongoose 4.0, they made it return the old value by default...
    if (err) {
      console.error(err);
      res.send(err);
    } else res.send(user);
  });
};

// These functions are used for when the backend makes calls to the database
exports.directUpdateUserBySpotifyId = (spotifyId, fieldsToUpdate) => {
  return User.findOneAndUpdate(
    { spotifyId },
    fieldsToUpdate,
    { new: true },
    (err, user) => {
      // the { new: true } option makes sure `user` is the updated value
      // in a Mongoose 4.0, they made it return the old value by default...
      if (err) {
        console.error(err);
        return err;
      }
      return user;
    }
  );
};

exports.updateAccessToken = (spotifyId, token) => {
  this.directUpdateUserBySpotifyId(spotifyId, { token });
};

exports.directFindUserBySpotifyId = (spotifyId) => {
  return User.findOne({ spotifyId }, (err, user) => {
    if (err) {
      console.error(err);
      return null;
    }
    return user;
  });
};

exports.directCreateUser = (fields) => {
  const user = new User(fields);
  return user.save((err, user) => {
    if (err) {
      console.error(err);
      return err;
    }
    return user;
  });
};
